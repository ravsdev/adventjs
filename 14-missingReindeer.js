/*
¬°Hemos perdido a un reno y falta poco m√°s de una semana para Navidad! üò±

Lo peor es que son tantos que no sabemos cu√°l es el que nos falta... ¬°Qu√© l√≠o! A ver, Elfon Musk ha hecho inventario y
nos pasa un array con los ids de cada reno.

üëç Lo bueno: los ids son n√∫meros que pueden ir del 0 al 100, no est√°n repetidos y s√≥lo se ha perdido un reno.

üëé Lo malo: la lista est√° desordenada y podr√≠a faltar el √∫ltimo...

Necesitamos una funci√≥n que al pasarle la lista de ids de renos nos diga inmediatamente cu√°l es el que falta:

missingReindeer([0, 2, 3]) // -> 1
missingReindeer([5, 6, 1, 2, 3, 7, 0]) // -> 4
missingReindeer([0, 1]) // -> 2 (¬°es el √∫ltimo el que falta!)
missingReindeer([3, 0, 1]) // -> 2
missingReindeer([9, 2, 3, 5, 6, 4, 7, 0, 1]) // -> 8
missingReindeer([0]) // -> 1 (¬°es el √∫ltimo el que falta!)

Parece f√°cil con una complejidad de O(n)... ¬øcrees que podr√≠as hacerlo mejor?

*/

//SOLUCI√ìN
function missingReindeer(ids) {
  //Creamos un array de valores dada la longitud del array ids
  let expectedIds = [...Array(ids.length).keys()];
	let idFound=null;
  
  //Hacemos una intersecci√≥n de los dos arrays
  //Filtra los elementos que no est√°n en el array expectedIds
  //Puesto que nos devuelve un array, obtenemos el √∫nico elemento que falta [0]
  idFound=expectedIds.filter(id=>!ids.includes(id))[0];

  //Si no ha devuelto ning√∫n valor devolvemos el √∫ltimo id (expectedIds.length)
  return idFound!=null?idFound:expectedIds.length;
}
